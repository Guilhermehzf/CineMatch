// web_socket_lobby.js

// Recupera os par√¢metros da URL
const params = new URLSearchParams(window.location.search);
const tokenFromUrl = params.get('token'); // Renomeado para evitar conflito com a vari√°vel token global se houver
const usernameFromUrl = params.get('user');

const sessionCodeDisplay = document.getElementById('sessionCodeDisplay');
const userListUL = document.getElementById('user-list'); // Refer√™ncia direta ao UL
const startLobbyForm = document.getElementById('Start_lobby');

// Conecta ao servidor WebSocket
const socket = io("/", {
  path: "/socket.io",
  transports: ["websocket"],
});
socket.on('connect', () => {
  console.log('Conectado ao servidor WebSocket com ID:', socket.id);

  // Verifica se token e username existem antes de emitir
  if (tokenFromUrl && usernameFromUrl) {
    console.log(`Entrando na sess√£o com token: ${tokenFromUrl} e usu√°rio: ${usernameFromUrl}`);
    socket.emit('join_session', {
      token: tokenFromUrl,
      username: usernameFromUrl
    });
  } else {
    console.error('Token ou usu√°rio n√£o encontrado na URL. Redirecionando para home.');
    // alert('Erro: Token da sess√£o ou nome de usu√°rio ausente. Voc√™ ser√° redirecionado.');
    window.location.href = `https://cinematch.ghzds.com.br:8080/`;
  }
});

// Evento de erro de sess√£o vindo do servidor
socket.on('session_error', (err) => {
  console.error('Erro de sess√£o do servidor:', err.message);
  alert('Erro na sess√£o: ' + (err.message || 'Ocorreu um problema.'));
  window.location.href = `https://cinematch.ghzds.com.br:8080/`;
});

// Desconex√£o do WebSocket
socket.on('disconnect', (reason) => {
  console.log('Desconectado do servidor WebSocket:', reason);
  // Pode ser interessante n√£o redirecionar imediatamente em todos os casos de disconnect,
  // pois pode ser uma perda tempor√°ria de conex√£o. Mas, para este exemplo, mantemos o redirecionamento.
  // alert('Voc√™ foi desconectado. Redirecionando para a p√°gina inicial.');
  // window.location.href = `http://localhost:5500/front-end/views/home.html`;
});

// Recebe e atualiza a lista de usu√°rios na sess√£o
socket.on('session_users', (data) => {
  if (!data || !Array.isArray(data.users)) {
    console.error('Dados de usu√°rios inv√°lidos recebidos:', data);
    return;
  }
  
  console.log('üë• Lista atualizada de usu√°rios:', data.users);

  // Atualiza o display do c√≥digo da sess√£o (token)
  if (sessionCodeDisplay && tokenFromUrl) {
    sessionCodeDisplay.textContent = tokenFromUrl;
  }

  if (userListUL) {
    userListUL.innerHTML = ''; // Limpa a lista antes de atualizar

    data.users.forEach((user, index) => {
      const li = document.createElement('li');
      // Aplica classes Bootstrap para layout flex√≠vel e alinhamento
      li.className = 'list-group-item d-flex justify-content-between align-items-center';
      
      const spanNome = document.createElement('span');
      spanNome.textContent = user;
      spanNome.title = user; // Tooltip com o nome do usu√°rio

      const deleteButton = document.createElement('button');
      deleteButton.className = 'btn btn-sm delete-user-btn'; // Estilo definido no HTML/CSS
      if(index !== 0){
        deleteButton.setAttribute('aria-label', `Remover ${user}`);
        deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>'; // √çcone de lixeira do Font Awesome
      }
      
      // Adiciona um atributo de dados para identificar o usu√°rio ao clicar
      deleteButton.dataset.username = user;
      
      deleteButton.onclick = function() {
        // L√≥gica para remover o usu√°rio (voc√™ implementar√° isso)
        // Isso provavelmente envolver√° enviar um evento via Socket.IO para o servidor
        console.log(`Bot√£o de remover clicado para o usu√°rio: ${this.dataset.username}`);
        const userToRemove = this.dataset.username;
        
        // Exemplo de como voc√™ poderia pedir confirma√ß√£o e emitir o evento
         if (confirm(`Tem certeza que deseja remover "${userToRemove}" da sess√£o?`)) {
           socket.emit('request_remove_user', { 
             token: tokenFromUrl, 
             usernameToRemove: userToRemove 
           });
           console.log(`Solicita√ß√£o para remover "${userToRemove}" enviada.`);
         }
      };

      // Aplica estilo especial para o primeiro usu√°rio (considerado o host)
      // E decide se mostra o bot√£o de deletar (ex: host n√£o pode ser deletado, ou s√≥ host pode deletar)
      if (index === 0) {
        li.classList.add('host-user'); // Adiciona classe para estiliza√ß√£o CSS espec√≠fica do host
        // Se o usu√°rio atual for o host, talvez ele possa remover outros, mas n√£o a si mesmo.
        // Ou, se apenas o host pode remover, e este √© o host, ele n√£o tem bot√£o para si.
        // A l√≥gica exata de quem pode remover quem depender√° das regras do seu jogo/app.
        // Exemplo simples: N√£o mostrar bot√£o de lixeira para o pr√≥prio host.
        if (user === usernameFromUrl) { // Se o usu√°rio da lista √© o usu√°rio atual E √© o host
            // deleteButton.style.display = 'none'; // Esconde o bot√£o para o host se auto-remover
        }
      }
      // Se o usu√°rio atual n√£o for o host, ele n√£o deve poder remover outros (a menos que seja uma regra do seu app)
      // if (index !== 0 && user !== usernameFromUrl) {
          // Apenas o host pode remover outros?
          // if (usernameFromUrl !== data.users[0]) { // Se o usu√°rio atual n√£o √© o host
          //    deleteButton.style.display = 'none';
          // }
      // }


      li.appendChild(spanNome);
      // S√≥ adiciona o bot√£o de deletar se n√£o for o pr√≥prio usu√°rio E se o usu√°rio atual for o host (exemplo de regra)
      // Ou se voc√™ quer que todos tenham um bot√£o (exceto talvez para si mesmos, se n√£o forem host)
      // A l√≥gica de quem pode deletar quem deve ser validada no servidor!
      // Para este exemplo, vamos mostrar para todos, exceto para o pr√≥prio usu√°rio se ele n√£o for o host.
      // Ou, mais simples por agora: mostrar para todos e a l√≥gica de permiss√£o fica no servidor.
      // if (user !== usernameFromUrl || (index === 0 && user === usernameFromUrl) /* host pode ver seu bot√£o, mas a l√≥gica de clique pode impedir a auto-remo√ß√£o */) {
      li.appendChild(deleteButton); // Adiciona o bot√£o de deletar
      // }
      
      userListUL.appendChild(li);
    });
  }
});

// Evento para iniciar a sess√£o (quando o host clica no bot√£o)
if (startLobbyForm) {
  startLobbyForm.addEventListener('submit', (event) => {
    event.preventDefault(); // Previne o envio padr√£o do formul√°rio
    if (tokenFromUrl) {
      console.log(`Host iniciando a sess√£o com token: ${tokenFromUrl}`);
      socket.emit('start_session', { token: tokenFromUrl });
    } else {
      console.error('Token n√£o dispon√≠vel para iniciar a sess√£o.');
      alert('Erro: N√£o foi poss√≠vel iniciar a sess√£o, token ausente.');
    }
  });
}

// Evento para redirecionar todos os usu√°rios para a p√°gina de "like"
socket.on('redirect_to_like', () => {
  console.log('Recebido evento redirect_to_like. Redirecionando...');
  if (tokenFromUrl && usernameFromUrl) {
    window.location.href = `https://cinematch.ghzds.com.br:8080/like?token=${tokenFromUrl}&user=${usernameFromUrl}`;
  } else {
    console.error('N√£o √© poss√≠vel redirecionar para like.html: token ou usu√°rio ausente.');
    // Redirecionar para home em caso de erro para n√£o ficar preso no lobby
    // window.location.href = `http://localhost:5500/front-end/views/home.html`;
  }
});

// Opcional: Lidar com erros de conex√£o do socket
socket.on('connect_error', (err) => {
  console.error('Falha ao conectar com o servidor WebSocket:', err.message);
  if (sessionCodeDisplay) {
    sessionCodeDisplay.textContent = "ERRO DE CONEX√ÉO";
    sessionCodeDisplay.style.color = "red";
    sessionCodeDisplay.style.fontSize = "1.5rem";
  }
  // Poderia mostrar uma mensagem mais amig√°vel para o usu√°rio aqui
});